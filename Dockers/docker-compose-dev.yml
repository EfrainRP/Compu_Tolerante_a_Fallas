#Docker-compose-dev.yml permitira ejecutar el dockerfile.dev para construir los CONTENEDORES necesarios, la red y sus contenedores para un proyecto en especifico
#Asi como configurar los puertos, nombres de los contenedores, variables de entorno y como su red 
version: "3.9"
services: #Se especifica los CONTENEDORES a utilizar 
  nodeapp:  #Se asigna nombre del contenedor, de NodeJs
    build:
      context: .  #Se le indica a este archivo donde se encuentra la aplicacion/contexto que estra trabajando
      dockerfile: Dockerfile.dev  #Se le indica que construya la imagen de acuerdo al archivo DockerFile.dev
    ports:  #Se enlista los puertos a exponer/habilitar del contenedor, "PuertoAnfitrion:PuertoContenedor"
      - "3000:3000"
    links:  #Se configura el nombre del contenedor que utilizara el puerto expuesto, para que se mapeen 
      - mongodb
    volumes:   #Se le indica al CONTENEDOR cual volumes utilizara para este contenedor 
      - .:/home/app #Este seria un volumes anonimos, lo cual la ruta actual se montara en la direccion del CONTENEDOR 
  mongodb:  #Se asigna nombre del contenedor, de la base de datos MongoDB
    image: mongo  #Se especifica la imagen a construir, para la BD de MongoDB
    ports:  #Se enlista los puertos a exponer/habilitar del contenedor, "PuertoAnfitrion:PuertoContenedor"
      - "27017:27017"
    environment:  #Se configura las variables de entorno necesarias al contenedor, de acuerdo a la imagen utilizada
      - MONGO_INITDB_ROOT_USERNAME=efra
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:  #Se le indica al CONTENEDOR de MONGODB cual volumes utilizara para este contenedor
      - mongo-data:/data/db #Se indica la ruta dentro del CONTENEDOR en donde va ser montado los datos de la base de datos


#Los volumes nos permiten almacenar los datos del CONTENEDOR generado para pasarlo al sistema anfitrion
volumes:    #Este volumes se defina todos los volumes que usaran los CONTENEDORES
  mongo-data: #Se especifica el nombre del volumen,sin ningun argumento
